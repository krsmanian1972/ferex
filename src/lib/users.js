/**
 * id => For Socket . A SRU id, generated by this system.
 * 
 * fuzzyId => For User. A SRU id, generated by external system.
 * 
 * Shall be renamed as Lobby later. 
 */

const OK = 'ok';
const NO = 'no';

const PING_ERR = {fuzzyId:null,ans:"ERROR"};

// The holder for id and the socket.
const connections = new Map();

// fuzzyId as Key and its Set of random ids 
const tokens = new Map();


/**
 * There is no guarantee that every socket will have unique ids
 * Hence we tag the sockets with a unique id.
 * 
 * Besides, we need a mechanism to remember the name of the user
 * this fuzzyId belongs for any labeling
 *  
 * @param {*} fuzzyId 
 */
function randomID(fuzzyId, name) {
  const segment = new Date().getTime()
  const uniqueId = Math.random().toString(36).substr(2, 16);

  return fuzzyId + '~' + name + '~' + segment + '~' + uniqueId;
}

/**
 * We create a "secure random id" for the given fuzzyId, because
 * we expect more than one connection for the same fuzzyId during a
 * multi-device setup.
 * 
 * We will then maintain another map to preserve the ids created for
 * such fuzzy ids. - tokens
 * 
 * Every entry of a token is Set for easier removal and uniqueness
 *  
 */
exports.create = async (socket, data) => {
  const fuzzyId = data.fuzzyId;
  const name = data.name;
  const id = randomID(fuzzyId, name);

  if (!tokens.has(fuzzyId)) {
    tokens.set(fuzzyId, new Set());
  }
  tokens.get(fuzzyId).add(id);

  connections.set(id, socket);

  return id;
};

// Return the socket associated with the Id
exports.get = (id) => connections.get(id);

// Return the List of tokens created for the given fuzzyId
exports.getTokens = (fuzzyId) => tokens.get(fuzzyId)


// Delete the socket entry identified by the Id.
// We need to remove the token entry as well.
exports.remove = (id) => {
  if (id) {
    connections.delete(id);

    const fuzzyId = id.split("~")[0];
    let ids = tokens.get(fuzzyId);
    if (ids && ids.has(id)) {
      ids.delete(id)
    }

  }
}

/* return ok or no
  The function simply looks for an entry in the tokens map.  
*/
exports.ping = (data) => {

  if(!data) {
    return PING_ERR;
  }

  const fuzzyId = data.fuzzyId;

  if (tokens.has(fuzzyId) && tokens.get(fuzzyId).size > 0) {
    return {fuzzyId:fuzzyId,ans:OK};
  }

  return {fuzzyId:fuzzyId,ans:NO};
};


/**
 * A segment to assist in testing the application
 */
exports.clear = () => {
  connections.clear();
  tokens.clear();
}